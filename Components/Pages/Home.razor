@page "/"
@using CountryPopulationVisualisation.Models
@using CountryPopulationVisualisation.Services
@inject CountryService CountryService
@rendermode InteractiveServer

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app.

@if (countries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <select class="form-select" aria-label="Default select example" @bind="year">
        <option selected value="2018">2018</option>
        @for (int i = 2017; i >= 1961; i--)
        {
            <option value="@i">@i</option>
        }
    </select>
    <button class="btn btn-primary" @onclick="ChangeYear">
        change year
    </button>
    
    <table
        class="table table-bordered table-striped">
        <thead>
        <tr>
            <th scope="col">Flag</th>
            <th scope="col"><button @onclick="ToggleNameSort">Name</button></th>
            <th scope="col"><button @onclick="TogglePopulationSort">Population</button></th>
            <th scope="col"><button @onclick="ToggleCapitalSort">Capital</button></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var country in countries)
        {
            <tr>
                <td><img src="@country.flagLocation" alt="@country.name" width="100" height="50" /></td>
                <td>@country.name</td>
                <td>@if (country.population != 0)
                    {
                        @country.population
                    }
                    else
                    {
                        <i>Dataset did not provide population for this period</i>
                    }
                </td>
                <td>@country.capital</td>
            </tr>
        }
        </tbody>
    </table>
}

@code{

    private IEnumerable<CountryModel>? countries;

    private int year = 2018;

    private string SortByName = "asc";
    private string SortByPopulation = "asc";
    private string SortByCapital = "asc";

    protected override async Task OnInitializedAsync()
    {
        countries = await CountryService.GetCountries();
        StateHasChanged();
    }

    private void ToggleNameSort()
    {

        if (SortByName == "asc")
        {
            countries = countries.OrderByDescending(x => x.name);
            SortByName = "desc";
        }
        else
        {
            countries = countries.OrderBy(x => x.name);
            SortByName = "asc";
        }
    }

    private void ToggleCapitalSort()
    {

        if (SortByCapital == "asc")
        {
            countries = countries.OrderByDescending(x => x.capital);
            SortByCapital = "desc";
        }
        else
        {
            countries = countries.OrderBy(x => x.capital);
            SortByCapital = "asc";
        }
    }

    private void TogglePopulationSort()
    {
        if (SortByPopulation == "asc")
        {
            countries = countries.OrderByDescending(x => x.population);
            SortByPopulation = "desc";
        }
        else
        {
            countries = countries.OrderBy(x => x.population);
            SortByPopulation = "asc";
        }
    }

    private async void ChangeYear()
    {
        countries = await CountryService.UpdateYearsForCountries(countries.ToList(), year);
        StateHasChanged();
    }

}